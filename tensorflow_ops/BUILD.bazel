# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

# Export for the PIP package.
exports_files(
    [
        "__init__.py",
    ],
)

py_library(
    name = "load_module",
    srcs = ["load_module.py"],
    deps = [],
)

cc_binary(
    name = "_time_ops.so",
    srcs = [
        "constants.h",
        "time_ops.cc",
        "time_ops_kernel.cc",
        "utils.cc",
        "utils.h",
    ],
    copts = select({
        "//conditions:default": [
            "-pthread",
            "-std=c++17",
            "-D_GLIBCXX_USE_CXX11_ABI=1",
        ],
    }),
    features = select({
        "//conditions:default": [],
    }),
    linkshared = 1,
    deps = [
        "//sql_utils",
        "//sql_utils:datetime_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@local_config_tf//:libtensorflow_framework",
        "@local_config_tf//:tf_header_lib",
    ],
)

cc_binary(
    name = "_timestamp_ops.so",
    srcs = [
        "constants.h",
        "timestamp_ops.cc",
        "timestamp_ops_kernel.cc",
        "utils.cc",
        "utils.h",
    ],
    copts = select({
        "//conditions:default": [
            "-pthread",
            "-std=c++17",
            "-D_GLIBCXX_USE_CXX11_ABI=1",
        ],
    }),
    features = select({
        "//conditions:default": [],
    }),
    linkshared = 1,
    deps = [
        "//sql_utils",
        "//sql_utils:datetime_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@local_config_tf//:libtensorflow_framework",
        "@local_config_tf//:tf_header_lib",
    ],
)

cc_binary(
    name = "_datetime_ops.so",
    srcs = [
        "constants.h",
        "datetime_ops.cc",
        "datetime_ops_kernel.cc",
        "utils.cc",
        "utils.h",
    ],
    copts = select({
        "//conditions:default": [
            "-pthread",
            "-std=c++17",
            "-D_GLIBCXX_USE_CXX11_ABI=1",
        ],
    }),
    features = select({
        "//conditions:default": [],
    }),
    linkshared = 1,
    deps = [
        "//sql_utils",
        "//sql_utils:datetime_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@local_config_tf//:libtensorflow_framework",
        "@local_config_tf//:tf_header_lib",
    ],
)

cc_binary(
    name = "_date_ops.so",
    srcs = [
        "constants.h",
        "date_ops.cc",
        "date_ops_kernel.cc",
        "utils.cc",
        "utils.h",
    ],
    copts = select({
        "//conditions:default": [
            "-pthread",
            "-std=c++17",
            "-D_GLIBCXX_USE_CXX11_ABI=1",
        ],
    }),
    features = select({
        "//conditions:default": [],
    }),
    linkshared = 1,
    deps = [
        "//sql_utils",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@local_config_tf//:libtensorflow_framework",
        "@local_config_tf//:tf_header_lib",
    ],
)

py_library(
    name = "time_ops_py",
    srcs = ["time_ops.py"],
    data = [":_time_ops.so"],
    deps = [":load_module"],
)

py_library(
    name = "timestamp_ops_py",
    srcs = ["timestamp_ops.py"],
    data = [":_timestamp_ops.so"],
    deps = [":load_module"],
)

py_library(
    name = "datetime_ops_py",
    srcs = ["datetime_ops.py"],
    data = [":_datetime_ops.so"],
    deps = [":load_module"],
)

py_library(
    name = "date_ops_py",
    srcs = ["date_ops.py"],
    data = [":_date_ops.so"],
    deps = [":load_module"],
)

py_library(
    name = "tensorflow_ops",
    srcs = ["__init__.py"],
    deps = [
        ":date_ops_py",
        ":datetime_ops_py",
        ":time_ops_py",
        ":timestamp_ops_py",
    ],
)
