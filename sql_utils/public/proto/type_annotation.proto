//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package bigquery_ml_utils;

import "google/protobuf/descriptor.proto";

option cc_enable_arenas = true;

message FieldFormat {
  enum Format {
    // No format annotation.
    // This is meant as a no-annotation marker in code and should not actually
    // be written as an annotation in .proto files.
    DEFAULT_FORMAT = 0;

    // A SQL DATE, encoded as days since 1970-01-01 UTC.
    // Can be applied to a field with ctype int32 or an int64.
    //
    // The function DecodeFormattedDate in public/functions/date_time_util.h
    // can be used to decode all supported date formats.
    DATE = 1;

    // A SQL timestamp.  Timestamps are encoded as elapsed
    // seconds, millis, micros, or nanos since 1970-01-01 00:00:00 UTC.
    // TIMESTAMP_SECONDS is the standard unix time_t type.
    // Should be applied to fields with ctype int64.
    //
    TIMESTAMP_SECONDS = 2;
    TIMESTAMP_MILLIS = 3;
    TIMESTAMP_MICROS = 4;
    TIMESTAMP_NANOS = 5;

    // A SQL DATE encoded in the MySQL date decimal format,
    // which looks like YYYYMMDD written as an integer.
    // Can be applied to a field with type int32 or an int64.
    //
    // NOTE: The value 0 decodes to NULL in this format.  (Otherwise it would
    // be an invalid date.)
    //
    // The function DecodeFormattedDate in
    // public/functions/date_time_util.h
    // can be used to decode all supported date formats.
    //
    DATE_DECIMAL = 6;

    // A SQL TIME encoded in an 8-byte bit field.
    // See public/civil_time.h for encoding methods.
    // Can be applied to a field with ctype int64.
    TIME_MICROS = 7;

    // A SQL DATETIME encoded in an 8-byte bit field.
    // See public/civil_time.h for encoding methods.
    // Can be applied to a field with ctype int64.
    //
    // NOTE: The value 0 decodes to NULL in this format.  (Otherwise it would
    // be an invalid datetime.)
    // To have the default DATETIME value at 1970-01-01 00:00:00, use
    // 138630961515462656 as the default integer value.
    DATETIME_MICROS = 8;

    // A SQL GEOGRAPHY encoded using either C++'s
    // STGeographyEncoder::Encode (util/geometry/st_lib/stgeography_coder.h) or
    // Java's STGeographyCoder.encode
    // (java/com/google/common/geometry/stlib/STGeographyCoder.java).
    //
    // Can be applied to bytes fields.
    ST_GEOGRAPHY_ENCODED = 9;

    // A SQL NUMERIC value. These values are encoded as scaled integers in
    // two's complement form with the most significant bit storing the sign. See
    // NumericValue::SerializeAsProtoBytes() for serialization format details.
    //
    // Can be applied to bytes fields.
    NUMERIC = 10;

    // A SQL BIGNUMERIC value. These values are encoded as scaled integers
    // in two's complement form with the most significant bit storing the sign.
    // See BigNumericValue::SerializeAsProtoBytes() for serialization format
    // details.
    //
    // Can be applied to bytes fields.
    BIGNUMERIC = 11;

    // A SQL JSON value. These values are encoded as JSON strings
    // according to the JSON RFC (RFC 7159)).
    //
    // Can be applied to string fields.
    JSON = 12;

    // A SQL INTERVAL value.
    // See IntervalValue::SerializeAsBytes() for serialization format details.
    //
    // Can be applied to bytes fields.
    INTERVAL = 14;

    // User code that switches on this enum must have a default case so
    // builds won't break if new enums get added.
    __FieldFormat_Type__switch_must_have_a_default__ = -1;
  }
}

message DeprecatedEncoding {
  // DEPRECATED - Encoding has been folded into the Type enum above.
  // This should not be used directly.
  enum Encoding {
    option allow_alias = true;

    DEFAULT_ENCODING = 0;
    // Like in FieldFormat, PACKED32 is the wrong name, and people should be
    // using DATE_DECIMAL instead.  This whole enum definition is deprecated
    // though, so this definition probably won't be fixed.
    DATE_PACKED32 = 1;  // This is the wrong name. The format is DATE_DECIMAL.
    DATE_DECIMAL = 1;
    __FieldFormat_Encoding__switch_must_have_a_default__ = -1;
  }
}

extend google.protobuf.FieldOptions {
  // Interpret a proto field using a specific SQL format, which
  // indicates both the SQL type and the encoding.
  //
  // When reading this field in SQL, it will act semantically as the specified
  // type rather than the underlying proto field type, and it will
  // be decoded by engines according to the specified encoding.
  // See FieldFormat.Format above.
  //
  // Engines should access this using ProtoType::GetFormatAnnotation rather
  // than extracting it themselves so they handle the deprecated variants
  // below correctly.
  optional FieldFormat.Format format = 522389649;

  // DEPRECATED: This is the legacy name for format.  It is here for
  // compatibility with old proto Descriptors.  It should not be used in
  // new .proto files.
  //
  // bigquery_ml_utils::ProtoType::GetFormatAnnotation will look in both places
  // and use the deprecated annotation if necessary.  If both are present, this
  // one is ignored.
  optional FieldFormat.Format type = 521522229;

  // DEPRECATED.  The encoding has been folded into the Format annotation above.
  // This exists only for legacy .proto files that include this annotation.
  // ProtoType::GetFormatAnnotation automatically merges the legacy encoding
  // annotations into the type annotation so callers can ignore this.
  optional DeprecatedEncoding.Encoding encoding = 521025307;

  // Interpret missing optional scalar fields as NULLs, rather than using
  // the field's default value, if this is set to false.
  //
  // By default, use_defaults = true, and SQL will use the field's
  // default value when accessing an optional scalar field that isn't present.
  //
  // Notes:
  // 1. In protocol buffers, all optional scalar fields have a default default
  //    (usually 0 or ""), so absence of a declared default has no effect.
  // 2. Repeated fields cannot have absent values, and cannot store NULLs
  //    without using a wrapper message.  See is_wrapper annotation.
  //    use_defaults is invalid on repeated fields.
  // 3. Message types do not have defaults, and not present optional message
  //    fields will always be interpreted as NULL.
  //    use_defaults has no effect on message type fields.
  optional bool use_defaults = 520771741 [default = true];
}

extend google.protobuf.MessageOptions {
  // Same as field-level use_defaults, but applies to all top-level fields in
  // this message.  Does not apply to fields recursively inside sub-messages.
  // Field-level use_defaults overrides message-level use_field_defaults.
  // (Would be called use_defaults, except the name cannot be reused.)
  optional bool use_field_defaults = 520716096 [default = true];
}